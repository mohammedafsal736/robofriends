{"version":3,"sources":["serviceWorker.js","Component/Card.js","Component/CardL.js","Component/SearchBox.js","Component/Scroll.js","Container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","width","height","src","CardL","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobot","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACC,yBAAKC,UAAU,sDACf,yBAAKC,IAAI,QAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAG,mCAA8BL,KAC3E,6BACA,4BAAKF,GACL,2BAAIC,MCWSO,EAfD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdF,KAAMS,EAAOI,GAAGb,KAChBC,MAAOQ,EAAOI,GAAGZ,WAElB,OACC,6BACES,ICDWK,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACC,yBAAKd,UAAU,OACf,2BAAOA,UAAU,mCACjBe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEGI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAWC,OAAQ,kBAAoBnB,OAAQ,UACvEgB,EAAMI,WCoCMC,G,wDAlCd,aAAc,IAAD,8BACZ,gBAWDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACd,YAAYa,EAAME,OAAOC,SAXxC,EAAKC,MAAM,CACVxB,OAAQ,GACRO,YAAa,IAJF,E,gEAQO,IAAD,OAClBkB,MAAM,8CAA8CC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAAUF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAAErB,OAAO6B,S,+BAQxH,IAAD,EACwBC,KAAKN,MAA7BxB,EADA,EACAA,OAAQO,EADR,EACQA,YACVwB,EAAgB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS5B,EAAY2B,kBAEtD,OAAQlC,EAAOoC,OACZ,yBAAK1C,UAAU,MAChB,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWc,aAAcsB,KAAKX,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAOnB,OAAQ+B,MALM,wBAAIrC,UAAU,MAAd,e,GAvBR2C,cCElBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SN2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.47d7b6d6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-blue tc dib br3 pa3 ma2 grow bw2 shadow-3'>\r\n\t\t<img alt='robot' width=\"200\" height=\"200\" src={`https://www.robohash.org/${id}`} />\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardL = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user,i)=>{\r\n\t\treturn (<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}/>);\r\n\t\t});\r\n\treturn ( \r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardL;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange})=> {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll' , border: '1px solid black' , height: '600px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}; \r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardL from '../Component/CardL';\r\nimport SearchBox from '../Component/SearchBox';\r\nimport Scroll from '../Component/Scroll.js';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{return response.json();}).then(users=>this.setState({ robots:users }));\r\n\t}\r\n\t\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\t}\r\n\t\r\n\t\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobot = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn !robots.length ? <h1 className='tc'>LOADING</h1> : \r\n\t\t\t\t(<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Robo Friends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardL robots={filteredRobot}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div> );\r\n\t\t\t\r\n\t}\r\n}\r\n\r\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Container/App';\n\n\nReactDOM.render(<App /> , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}